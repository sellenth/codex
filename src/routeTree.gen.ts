/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StoryboardRouteImport } from './routes/storyboard'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as LocationsRouteImport } from './routes/locations'
import { Route as CharactersRouteImport } from './routes/characters'
import { Route as IndexRouteImport } from './routes/index'
import { Route as EpisodesIndexRouteImport } from './routes/episodes.index'
import { Route as EpisodesNewRouteImport } from './routes/episodes/new'
import { Route as EpisodesEpisodeIdRouteImport } from './routes/episodes.$episodeId'

const StoryboardRoute = StoryboardRouteImport.update({
  id: '/storyboard',
  path: '/storyboard',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const LocationsRoute = LocationsRouteImport.update({
  id: '/locations',
  path: '/locations',
  getParentRoute: () => rootRouteImport,
} as any)
const CharactersRoute = CharactersRouteImport.update({
  id: '/characters',
  path: '/characters',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const EpisodesIndexRoute = EpisodesIndexRouteImport.update({
  id: '/episodes/',
  path: '/episodes/',
  getParentRoute: () => rootRouteImport,
} as any)
const EpisodesNewRoute = EpisodesNewRouteImport.update({
  id: '/episodes/new',
  path: '/episodes/new',
  getParentRoute: () => rootRouteImport,
} as any)
const EpisodesEpisodeIdRoute = EpisodesEpisodeIdRouteImport.update({
  id: '/episodes/$episodeId',
  path: '/episodes/$episodeId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/characters': typeof CharactersRoute
  '/locations': typeof LocationsRoute
  '/settings': typeof SettingsRoute
  '/storyboard': typeof StoryboardRoute
  '/episodes/$episodeId': typeof EpisodesEpisodeIdRoute
  '/episodes/new': typeof EpisodesNewRoute
  '/episodes': typeof EpisodesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/characters': typeof CharactersRoute
  '/locations': typeof LocationsRoute
  '/settings': typeof SettingsRoute
  '/storyboard': typeof StoryboardRoute
  '/episodes/$episodeId': typeof EpisodesEpisodeIdRoute
  '/episodes/new': typeof EpisodesNewRoute
  '/episodes': typeof EpisodesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/characters': typeof CharactersRoute
  '/locations': typeof LocationsRoute
  '/settings': typeof SettingsRoute
  '/storyboard': typeof StoryboardRoute
  '/episodes/$episodeId': typeof EpisodesEpisodeIdRoute
  '/episodes/new': typeof EpisodesNewRoute
  '/episodes/': typeof EpisodesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/characters'
    | '/locations'
    | '/settings'
    | '/storyboard'
    | '/episodes/$episodeId'
    | '/episodes/new'
    | '/episodes'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/characters'
    | '/locations'
    | '/settings'
    | '/storyboard'
    | '/episodes/$episodeId'
    | '/episodes/new'
    | '/episodes'
  id:
    | '__root__'
    | '/'
    | '/characters'
    | '/locations'
    | '/settings'
    | '/storyboard'
    | '/episodes/$episodeId'
    | '/episodes/new'
    | '/episodes/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CharactersRoute: typeof CharactersRoute
  LocationsRoute: typeof LocationsRoute
  SettingsRoute: typeof SettingsRoute
  StoryboardRoute: typeof StoryboardRoute
  EpisodesEpisodeIdRoute: typeof EpisodesEpisodeIdRoute
  EpisodesNewRoute: typeof EpisodesNewRoute
  EpisodesIndexRoute: typeof EpisodesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/storyboard': {
      id: '/storyboard'
      path: '/storyboard'
      fullPath: '/storyboard'
      preLoaderRoute: typeof StoryboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/locations': {
      id: '/locations'
      path: '/locations'
      fullPath: '/locations'
      preLoaderRoute: typeof LocationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/characters': {
      id: '/characters'
      path: '/characters'
      fullPath: '/characters'
      preLoaderRoute: typeof CharactersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/episodes/': {
      id: '/episodes/'
      path: '/episodes'
      fullPath: '/episodes'
      preLoaderRoute: typeof EpisodesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/episodes/new': {
      id: '/episodes/new'
      path: '/episodes/new'
      fullPath: '/episodes/new'
      preLoaderRoute: typeof EpisodesNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/episodes/$episodeId': {
      id: '/episodes/$episodeId'
      path: '/episodes/$episodeId'
      fullPath: '/episodes/$episodeId'
      preLoaderRoute: typeof EpisodesEpisodeIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CharactersRoute: CharactersRoute,
  LocationsRoute: LocationsRoute,
  SettingsRoute: SettingsRoute,
  StoryboardRoute: StoryboardRoute,
  EpisodesEpisodeIdRoute: EpisodesEpisodeIdRoute,
  EpisodesNewRoute: EpisodesNewRoute,
  EpisodesIndexRoute: EpisodesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
