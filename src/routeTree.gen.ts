/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StoryboardRouteImport } from './routes/storyboard'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as LocationsRouteImport } from './routes/locations'
import { Route as FalRouteImport } from './routes/fal'
import { Route as CharactersRouteImport } from './routes/characters'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LocationsIndexRouteImport } from './routes/locations.index'
import { Route as EpisodesIndexRouteImport } from './routes/episodes.index'
import { Route as CharactersIndexRouteImport } from './routes/characters.index'
import { Route as LocationsNewRouteImport } from './routes/locations/new'
import { Route as LocationsLocationIdRouteImport } from './routes/locations.$locationId'
import { Route as EpisodesNewRouteImport } from './routes/episodes/new'
import { Route as EpisodesEpisodeIdRouteImport } from './routes/episodes.$episodeId'
import { Route as CharactersNewRouteImport } from './routes/characters/new'
import { Route as CharactersCharacterIdRouteImport } from './routes/characters.$characterId'

const StoryboardRoute = StoryboardRouteImport.update({
  id: '/storyboard',
  path: '/storyboard',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const LocationsRoute = LocationsRouteImport.update({
  id: '/locations',
  path: '/locations',
  getParentRoute: () => rootRouteImport,
} as any)
const FalRoute = FalRouteImport.update({
  id: '/fal',
  path: '/fal',
  getParentRoute: () => rootRouteImport,
} as any)
const CharactersRoute = CharactersRouteImport.update({
  id: '/characters',
  path: '/characters',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LocationsIndexRoute = LocationsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LocationsRoute,
} as any)
const EpisodesIndexRoute = EpisodesIndexRouteImport.update({
  id: '/episodes/',
  path: '/episodes/',
  getParentRoute: () => rootRouteImport,
} as any)
const CharactersIndexRoute = CharactersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CharactersRoute,
} as any)
const LocationsNewRoute = LocationsNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => LocationsRoute,
} as any)
const LocationsLocationIdRoute = LocationsLocationIdRouteImport.update({
  id: '/$locationId',
  path: '/$locationId',
  getParentRoute: () => LocationsRoute,
} as any)
const EpisodesNewRoute = EpisodesNewRouteImport.update({
  id: '/episodes/new',
  path: '/episodes/new',
  getParentRoute: () => rootRouteImport,
} as any)
const EpisodesEpisodeIdRoute = EpisodesEpisodeIdRouteImport.update({
  id: '/episodes/$episodeId',
  path: '/episodes/$episodeId',
  getParentRoute: () => rootRouteImport,
} as any)
const CharactersNewRoute = CharactersNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => CharactersRoute,
} as any)
const CharactersCharacterIdRoute = CharactersCharacterIdRouteImport.update({
  id: '/$characterId',
  path: '/$characterId',
  getParentRoute: () => CharactersRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/characters': typeof CharactersRouteWithChildren
  '/fal': typeof FalRoute
  '/locations': typeof LocationsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/storyboard': typeof StoryboardRoute
  '/characters/$characterId': typeof CharactersCharacterIdRoute
  '/characters/new': typeof CharactersNewRoute
  '/episodes/$episodeId': typeof EpisodesEpisodeIdRoute
  '/episodes/new': typeof EpisodesNewRoute
  '/locations/$locationId': typeof LocationsLocationIdRoute
  '/locations/new': typeof LocationsNewRoute
  '/characters/': typeof CharactersIndexRoute
  '/episodes': typeof EpisodesIndexRoute
  '/locations/': typeof LocationsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/fal': typeof FalRoute
  '/settings': typeof SettingsRoute
  '/storyboard': typeof StoryboardRoute
  '/characters/$characterId': typeof CharactersCharacterIdRoute
  '/characters/new': typeof CharactersNewRoute
  '/episodes/$episodeId': typeof EpisodesEpisodeIdRoute
  '/episodes/new': typeof EpisodesNewRoute
  '/locations/$locationId': typeof LocationsLocationIdRoute
  '/locations/new': typeof LocationsNewRoute
  '/characters': typeof CharactersIndexRoute
  '/episodes': typeof EpisodesIndexRoute
  '/locations': typeof LocationsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/characters': typeof CharactersRouteWithChildren
  '/fal': typeof FalRoute
  '/locations': typeof LocationsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/storyboard': typeof StoryboardRoute
  '/characters/$characterId': typeof CharactersCharacterIdRoute
  '/characters/new': typeof CharactersNewRoute
  '/episodes/$episodeId': typeof EpisodesEpisodeIdRoute
  '/episodes/new': typeof EpisodesNewRoute
  '/locations/$locationId': typeof LocationsLocationIdRoute
  '/locations/new': typeof LocationsNewRoute
  '/characters/': typeof CharactersIndexRoute
  '/episodes/': typeof EpisodesIndexRoute
  '/locations/': typeof LocationsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/characters'
    | '/fal'
    | '/locations'
    | '/settings'
    | '/storyboard'
    | '/characters/$characterId'
    | '/characters/new'
    | '/episodes/$episodeId'
    | '/episodes/new'
    | '/locations/$locationId'
    | '/locations/new'
    | '/characters/'
    | '/episodes'
    | '/locations/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/fal'
    | '/settings'
    | '/storyboard'
    | '/characters/$characterId'
    | '/characters/new'
    | '/episodes/$episodeId'
    | '/episodes/new'
    | '/locations/$locationId'
    | '/locations/new'
    | '/characters'
    | '/episodes'
    | '/locations'
  id:
    | '__root__'
    | '/'
    | '/characters'
    | '/fal'
    | '/locations'
    | '/settings'
    | '/storyboard'
    | '/characters/$characterId'
    | '/characters/new'
    | '/episodes/$episodeId'
    | '/episodes/new'
    | '/locations/$locationId'
    | '/locations/new'
    | '/characters/'
    | '/episodes/'
    | '/locations/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CharactersRoute: typeof CharactersRouteWithChildren
  FalRoute: typeof FalRoute
  LocationsRoute: typeof LocationsRouteWithChildren
  SettingsRoute: typeof SettingsRoute
  StoryboardRoute: typeof StoryboardRoute
  EpisodesEpisodeIdRoute: typeof EpisodesEpisodeIdRoute
  EpisodesNewRoute: typeof EpisodesNewRoute
  EpisodesIndexRoute: typeof EpisodesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/storyboard': {
      id: '/storyboard'
      path: '/storyboard'
      fullPath: '/storyboard'
      preLoaderRoute: typeof StoryboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/locations': {
      id: '/locations'
      path: '/locations'
      fullPath: '/locations'
      preLoaderRoute: typeof LocationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fal': {
      id: '/fal'
      path: '/fal'
      fullPath: '/fal'
      preLoaderRoute: typeof FalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/characters': {
      id: '/characters'
      path: '/characters'
      fullPath: '/characters'
      preLoaderRoute: typeof CharactersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/locations/': {
      id: '/locations/'
      path: '/'
      fullPath: '/locations/'
      preLoaderRoute: typeof LocationsIndexRouteImport
      parentRoute: typeof LocationsRoute
    }
    '/episodes/': {
      id: '/episodes/'
      path: '/episodes'
      fullPath: '/episodes'
      preLoaderRoute: typeof EpisodesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/characters/': {
      id: '/characters/'
      path: '/'
      fullPath: '/characters/'
      preLoaderRoute: typeof CharactersIndexRouteImport
      parentRoute: typeof CharactersRoute
    }
    '/locations/new': {
      id: '/locations/new'
      path: '/new'
      fullPath: '/locations/new'
      preLoaderRoute: typeof LocationsNewRouteImport
      parentRoute: typeof LocationsRoute
    }
    '/locations/$locationId': {
      id: '/locations/$locationId'
      path: '/$locationId'
      fullPath: '/locations/$locationId'
      preLoaderRoute: typeof LocationsLocationIdRouteImport
      parentRoute: typeof LocationsRoute
    }
    '/episodes/new': {
      id: '/episodes/new'
      path: '/episodes/new'
      fullPath: '/episodes/new'
      preLoaderRoute: typeof EpisodesNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/episodes/$episodeId': {
      id: '/episodes/$episodeId'
      path: '/episodes/$episodeId'
      fullPath: '/episodes/$episodeId'
      preLoaderRoute: typeof EpisodesEpisodeIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/characters/new': {
      id: '/characters/new'
      path: '/new'
      fullPath: '/characters/new'
      preLoaderRoute: typeof CharactersNewRouteImport
      parentRoute: typeof CharactersRoute
    }
    '/characters/$characterId': {
      id: '/characters/$characterId'
      path: '/$characterId'
      fullPath: '/characters/$characterId'
      preLoaderRoute: typeof CharactersCharacterIdRouteImport
      parentRoute: typeof CharactersRoute
    }
  }
}

interface CharactersRouteChildren {
  CharactersCharacterIdRoute: typeof CharactersCharacterIdRoute
  CharactersNewRoute: typeof CharactersNewRoute
  CharactersIndexRoute: typeof CharactersIndexRoute
}

const CharactersRouteChildren: CharactersRouteChildren = {
  CharactersCharacterIdRoute: CharactersCharacterIdRoute,
  CharactersNewRoute: CharactersNewRoute,
  CharactersIndexRoute: CharactersIndexRoute,
}

const CharactersRouteWithChildren = CharactersRoute._addFileChildren(
  CharactersRouteChildren,
)

interface LocationsRouteChildren {
  LocationsLocationIdRoute: typeof LocationsLocationIdRoute
  LocationsNewRoute: typeof LocationsNewRoute
  LocationsIndexRoute: typeof LocationsIndexRoute
}

const LocationsRouteChildren: LocationsRouteChildren = {
  LocationsLocationIdRoute: LocationsLocationIdRoute,
  LocationsNewRoute: LocationsNewRoute,
  LocationsIndexRoute: LocationsIndexRoute,
}

const LocationsRouteWithChildren = LocationsRoute._addFileChildren(
  LocationsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CharactersRoute: CharactersRouteWithChildren,
  FalRoute: FalRoute,
  LocationsRoute: LocationsRouteWithChildren,
  SettingsRoute: SettingsRoute,
  StoryboardRoute: StoryboardRoute,
  EpisodesEpisodeIdRoute: EpisodesEpisodeIdRoute,
  EpisodesNewRoute: EpisodesNewRoute,
  EpisodesIndexRoute: EpisodesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
